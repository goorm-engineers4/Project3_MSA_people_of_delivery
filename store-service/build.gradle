plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example.cloudfour'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
    set('querydslVersion', "5.0.0")  // Querydsl 버전 명시적 정의
}

// dependencyManagement를 dependencies보다 먼저 선언
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation project(':module-common')
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // ★ 중요: MongoDB를 실제 사용하지 않더라도 런타임에 클래스가 필요함
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    annotationProcessor 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    // Springdoc OpenAPI (Swagger)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // JPA QueryDSL
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // MongoDB Querydsl - exclude 제거 (필요한 클래스들이 제외될 수 있음)
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation("com.querydsl:querydsl-mongodb:${querydslVersion}") {
        exclude group: "org.mongodb", module: "mongo-java-driver"
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // test에서도 lombok 사용 가능하게 추가
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}


tasks.named('test') {
    useJUnitPlatform()

    // Mockito agent configuration to fix future JDK compatibility warnings
    jvmArgs '-javaagent:' + configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }.absolutePath
}

tasks.register("prepareKotlinBuildScriptModel"){}

def querydslDir = "$buildDir/generated/querydsl"

clean {
    delete file(querydslDir)
}

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

// MongoDB + JPA 둘 다 지원하는 컴파일 설정
compileJava {
    dependsOn processResources
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
    options.annotationProcessorPath = configurations.annotationProcessor
    // MongoDB와 JPA annotation processor 모두 명시적으로 지정
    options.compilerArgs += [
            "-processor", [
            "lombok.launch.AnnotationProcessorHider\$AnnotationProcessor",
            "com.querydsl.apt.jpa.JPAAnnotationProcessor",
            "org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor"
    ].join(",")
    ]
}